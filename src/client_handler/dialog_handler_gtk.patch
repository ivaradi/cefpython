--- dialog_handler_gtk.h.orig	2023-02-19 14:37:25.679486669 +0100
+++ dialog_handler_gtk.h	2023-03-10 19:25:15.199478282 +0100
@@ -1,3 +1,6 @@
+// COPIED from upstream "cef/tests/cefclient/browser/" directory
+// with minor modifications. See the .patch file in current directory.
+
 // Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
 // reserved. Use of this source code is governed by a BSD-style license that
 // can be found in the LICENSE file.
@@ -12,8 +15,6 @@
 #include "include/cef_dialog_handler.h"
 #include "include/cef_jsdialog_handler.h"
 
-namespace client {
-
 class ClientDialogHandlerGtk : public CefDialogHandler,
                                public CefJSDialogHandler {
  public:
@@ -77,6 +78,4 @@
   DISALLOW_COPY_AND_ASSIGN(ClientDialogHandlerGtk);
 };
 
-}  // namespace client
-
 #endif  // CEF_TESTS_CEFCLIENT_BROWSER_DIALOG_HANDLER_GTK_H_
--- dialog_handler_gtk.cpp.orig	2023-02-19 14:37:25.943488884 +0100
+++ dialog_handler_gtk.cpp	2023-03-10 19:25:15.199478282 +0100
@@ -1,19 +1,23 @@
+// COPIED from upstream "cef/tests/cefclient/browser/" directory
+// with minor modifications. See the .patch file in current directory.
+
 // Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
 // reserved. Use of this source code is governed by a BSD-style license that
 // can be found in the LICENSE file.
 
-#include "tests/cefclient/browser/dialog_handler_gtk.h"
+#include "dialog_handler_gtk.h"
 
 #include <libgen.h>
 #include <sys/stat.h>
 
 #include "include/cef_browser.h"
 #include "include/cef_parser.h"
+#include "include/base/cef_bind.h"
+#include "include/base/cef_callback.h"
 #include "include/wrapper/cef_helpers.h"
-#include "tests/cefclient/browser/root_window.h"
-#include "tests/cefclient/browser/util_gtk.h"
-
-namespace client {
+#include "include/wrapper/cef_closure_task.h"
+#include "util_gtk.h"
+#include "x11.h"
 
 namespace {
 
@@ -130,20 +134,6 @@
   }
 }
 
-GtkWindow* GetWindow(CefRefPtr<CefBrowser> browser) {
-  REQUIRE_MAIN_THREAD();
-  scoped_refptr<RootWindow> root_window =
-      RootWindow::GetForBrowser(browser->GetIdentifier());
-  if (root_window) {
-    GtkWidget* window = root_window->GetWindowHandle();
-    DCHECK(window);
-    if (!window)
-      LOG(ERROR) << "No GtkWindow for browser";
-    return GTK_WINDOW(window);
-  }
-  return nullptr;
-}
-
 }  // namespace
 
 ClientDialogHandlerGtk::ClientDialogHandlerGtk() : gtk_dialog_(nullptr) {}
@@ -223,7 +213,6 @@
 void ClientDialogHandlerGtk::OnFileDialogContinue(
     const OnFileDialogParams& params,
     GtkWindow* window) {
-  REQUIRE_MAIN_THREAD();
 
   ScopedGdkThreadsEnter scoped_gdk_threads;
 
@@ -334,7 +323,6 @@
 
 void ClientDialogHandlerGtk::OnJSDialogContinue(const OnJSDialogParams& params,
                                                 GtkWindow* window) {
-  REQUIRE_MAIN_THREAD();
 
   ScopedGdkThreadsEnter scoped_gdk_threads;
 
@@ -402,14 +390,14 @@
 void ClientDialogHandlerGtk::GetWindowAndContinue(
     CefRefPtr<CefBrowser> browser,
     base::OnceCallback<void(GtkWindow*)> callback) {
-  if (!CURRENTLY_ON_MAIN_THREAD()) {
-    MAIN_POST_CLOSURE(
-        base::BindOnce(&ClientDialogHandlerGtk::GetWindowAndContinue, this,
-                       browser, std::move(callback)));
-    return;
-  }
+  // if (!CURRENTLY_ON_MAIN_THREAD()) {
+  //   MAIN_POST_CLOSURE(
+  //       base::BindOnce(&ClientDialogHandlerGtk::GetWindowAndContinue, this,
+  //                      browser, std::move(callback)));
+  //   return;
+  // }
 
-  GtkWindow* window = GetWindow(browser);
+  GtkWindow* window = CefBrowser_GetGtkWindow(browser);
   if (window) {
     std::move(callback).Run(window);
   }
@@ -419,7 +407,6 @@
 void ClientDialogHandlerGtk::OnDialogResponse(GtkDialog* dialog,
                                               gint response_id,
                                               ClientDialogHandlerGtk* handler) {
-  REQUIRE_MAIN_THREAD();
 
   DCHECK_EQ(dialog, GTK_DIALOG(handler->gtk_dialog_));
   switch (response_id) {
@@ -435,8 +422,6 @@
   }
 
   CefPostTask(TID_UI,
-              base::BindOnce(&ClientDialogHandlerGtk::OnResetDialogState,
-                             handler, nullptr));
+              CefCreateClosureTask(base::BindOnce(&ClientDialogHandlerGtk::OnResetDialogState,
+                                                  handler, nullptr)));
 }
-
-}  // namespace client
